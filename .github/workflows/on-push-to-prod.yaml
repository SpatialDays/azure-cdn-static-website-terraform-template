# standardized template for terraform plan on pull request to branch made
# by @ivica3730k

# This GitHub action is triggered by push to prod branch.

# It is responsible for running Terraform validation and Terraform apply and providing feedback on the pull request with the results.
# The action sets environment variables from the secrets and runs Terraform commands.
# It checks out the code, performs envsubst on the provider_secrets_template file with the environment variables,
# sets up Terraform provider, initializes Terraform with newly create backend configuration file, and validates Terraform code.
# If validation is successful, it runs Terraform apply and outputs the results to a comment on the pull request.
# If validation or apply fails, it creates the github issue with the error message and fails the build.
# The action has permission to read the contents and write issues and pull requests.

# to use it, change your branch names, environment name and secrets names

name: Terraform apply on push to prod

permissions:
  contents: read
  issues: write
  pull-requests: write
on:
  push:
    branches:
      - prod
  workflow_dispatch:
  workflow_call:
  schedule:
    - cron: "0 7 * * 1" # every Monday at 7am UTC to renew the certificate if it is about to expire

concurrency: prod-enviroment

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    # environment: ENVIRONMENT_NAME # uncomment this line and replace ENVIRONMENT_NAME with the name of the environment if you are using github managed environments
    env:
      TF_VAR_SUBSCRIPTION_ID: ${{ secrets.TF_VAR_SUBSCRIPTION_ID }}
      TF_VAR_CLIENT_ID: ${{ secrets.TF_VAR_CLIENT_ID }}
      TF_VAR_CLIENT_SECRET: ${{ secrets.TF_VAR_CLIENT_SECRET }}
      TF_VAR_TENANT_ID: ${{ secrets.TF_VAR_TENANT_ID }}
      TF_VAR_STATE_RESOURCE_GROUP_NAME: ${{ secrets.TF_VAR_STATE_RESOURCE_GROUP_NAME }}
      TF_VAR_STATE_STORAGE_ACCOUNT_NAME: ${{ secrets.TF_VAR_STATE_STORAGE_ACCOUNT_NAME }}
      TF_VAR_STATE_CONTAINER_NAME: ${{ secrets.TF_VAR_STATE_CONTAINER_NAME }}
      # deployment specific variables
      TF_VAR_ENVIRONMENT: ${{ vars.TF_VAR_ENVIRONMENT }}
      TF_VAR_PROJECT_COMMON_NAME: ${{ vars.TF_VAR_PROJECT_COMMON_NAME }}
      TF_VAR_DOMAIN_NAME: ${{ vars.TF_VAR_DOMAIN_NAME }}
      TF_VAR_LETSENCRYPT_EMAIL: ${{ vars.TF_VAR_LETSENCRYPT_EMAIL }}
      TF_VAR_AZURE_REGION: ${{ vars.TF_VAR_AZURE_REGION }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Perform envsubst on provider_secrets_template with environment variables
        run: |
          envsubst < provider_secrets_template > provider_secrets
      - name: Setup Terraform Provider
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false
      - name: Terraform init with backend config
        id: init
        run: |
          touch init.txt
          terraform init -upgrade -backend-config=provider_secrets -no-color 2>&1 | tee init.txt
          exit ${PIPESTATUS[0]}
        continue-on-error: true
      - name: Save init output into artifact
        uses: actions/upload-artifact@v3
        with:
          name: init-${{ github.run_number }}
          path: init.txt
      - name: Move init output into var
        run: |
          echo "INIT_OUTPUT<<EOF" >> $GITHUB_ENV
          cat init.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create or Update Issue with init error message
        if: steps.init.outcome == 'failure'
        uses: dacbd/create-issue-action@v1.2.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Terraform init failed on push to branch ${{ steps.extract_branch.outputs.branch }}
          body: |
            Terraform init failed on push to branch ${{ steps.extract_branch.outputs.branch }}, unique id ${{ github.run_id }}
            <br>
            Output of terraform init:
            ```
            ${{ env.INIT_OUTPUT }}

            ```
      - name: Fail the build if terraform init failed
        if: steps.init.outcome == 'failure'
        run: exit 1
      - name: Terraform validate
        id: validate
        run: |
          terraform validate -no-color 2>&1 | tee validate.txt
          exit ${PIPESTATUS[0]}
        continue-on-error: true
      - name: Save validate.txt into artifact
        uses: actions/upload-artifact@v3
        with:
          name: validate-${{ github.run_number }}
          path: validate.txt
      - name: Move init output into var
        run: |
          echo "VALIDATE_OUTPUT<<EOF" >> $GITHUB_ENV
          cat validate.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create or Update Issue with validate error message
        if: steps.validate.outcome == 'failure'
        uses: dacbd/create-issue-action@v1.2.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Terraform validate failed on push to branch ${{ steps.extract_branch.outputs.branch }}
          body: |
            Terraform validate failed on push to branch ${{ steps.extract_branch.outputs.branch }}, unique id ${{ github.run_id }}
            <br>
            Output of terraform validate:
            ```
            ${{ env.VALIDATE_OUTPUT }}

            ```
      - name: Fail the build if terraform validate failed
        if: steps.validate.outcome == 'failure'
        run: exit 1
      - name: Terraform apply
        id: apply
        run: |
          terraform apply -no-color -auto-approve 2>&1 | tee apply-output.txt
          exit ${PIPESTATUS[0]}
        continue-on-error: true
      - name: Store apply output into artifact
        uses: actions/upload-artifact@v3
        with:
          name: apply-${{ github.run_number }}
          path: apply-output.txt
      - name: Check if Apply is longer than 40000 chars
        id: apply-filter-not-too-long
        continue-on-error: true
        run: |
          if [ $(wc -c < apply-output.txt) -gt 40000 ]; then
            echo "Apply is longer than 40000 chars"
            exit 1
          fi
      - name: Store apply output into GITHUB OUTPUT if plan is not too long
        if: steps.apply-filter-not-too-long.outcome == 'success'
        run: |
          echo "APPLY_OUTPUT<<EOF" >> $GITHUB_ENV
          cat apply-output.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Store message in apply output if plan is too long
        if: steps.apply-filter-not-too-long.outcome == 'failure'
        run: |
          echo "APPLY_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "Apply is longer than 40000 chars, please check the artifact" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Create or Update Issue with apply error message
        if: steps.apply.outcome == 'failure'
        uses: dacbd/create-issue-action@v1.2.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: Terraform apply failed on push to branch ${{ steps.extract_branch.outputs.branch }}
          body: |
            Terraform apply failed on push to branch ${{ steps.extract_branch.outputs.branch }}, unique id ${{ github.run_id }}
            <br>
            Output of terraform apply:
            ```
            ${{ env.APPLY_OUTPUT }}
            ```
      - name: Fail the build if terraform apply failed
        if: steps.apply.outcome == 'failure'
        run: exit 1
